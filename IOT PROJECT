Internet of Things Based Smart Traffic Light System
By 
OLUWASEMILORE ANGEL WILLIAMS, S0026563@ATU.IE
MARGARETHA SATRIADI, S00265097@ATU.IE 
DAVID JONATHAN, S00272373@ATU.IE

 

Youtube Reference Link 
Trello page: https://trello.com/invite/b/67ca1e78b946d4acddf9d0bb/ATTI64868083dd735e0d76088b6573dd8fc8A5CAD9BD/simple-project-board
Github Teams Page:
ApilAngelDavid ¬∑ semzyWorld Team

Project Summary
The IoT-Based Smart Traffic Light System aims at enhancing road safety, optimizing traffic flow, and increasing energy efficiency using smart sensors and cloud connectivity. The project uses Arduino Yun, PIR (Passive Infrared) sensors, and IoT technology to create an interactive and data-driven traffic management system.
A system based on a PIR sensor to detect an approach of vehicles and dynamically manage traffic lights to make sure the traffic flow smooth. Pedestrians can request to cross the road by a push-button facility. The integration with the cloud platform can make a real-time monitoring of traffic and analysis, which can be used to improve urban mobility by city planners.
Traffic congestion is a huge problem in cities worldwide. Long wait times, inefficient traffic signals, and delays for emergency vehicles make things even worse. Traditional traffic lights follow fixed timers, which don‚Äôt account for real-time traffic flow. This leads to unnecessary delays, wasted fuel, and increased pollution.
Our solution? A smart traffic light system that adapts in real-time using IoT. This system will:
‚úî Adjust traffic light timings based on real-time vehicle detection.
‚úî Give priority to emergency vehicles using RFID.
‚úî Improve pedestrian safety with push-button crossings.
‚úî Send live traffic data to the cloud for monitoring and analysis.
By making traffic signals smarter, we can cut down congestion, reduce emissions, and improve overall traffic efficiency.
How It Works
Vehicle Detection & Smart Timing
‚Ä¢	IR or Ultrasonic sensors count vehicles at intersections.
‚Ä¢	Based on real-time data, the microcontroller adjusts green light duration dynamically.
‚Ä¢	If a road is empty, the light doesn‚Äôt stay green unnecessarily.
Emergency Vehicle Priority
‚Ä¢	RFID tags on ambulances and fire trucks trigger an automatic green light.
‚Ä¢	This allows emergency vehicles to pass without delay, potentially saving lives.
Pedestrian Safety Features
‚Ä¢	A push button lets pedestrians request to cross.
‚Ä¢	After a short delay, the system safely changes the signal.
IoT Connectivity for Real-Time Monitoring
‚Ä¢	Traffic data is sent to the cloud using Firebase or Thingspeak.
‚Ä¢	City officials can remotely monitor and control signals if needed.

What We Need for This Project
Hardware Components
‚úÖ Arduino Uno ‚Äì The brain of the system.


 

‚úÖ IR Sensors ‚Äì Detect vehicles.
 

‚úÖ RFID Module (RC522) ‚Äì Recognizes emergency vehicles.
 
‚úÖ Traffic Light LEDs ‚Äì Red, yellow, and green lights.
 

‚úÖ ESP8266 Wi-Fi Module ‚Äì Sends data to the cloud.
 
‚úÖ Push Button ‚Äì Lets pedestrians request crossings.
 

Software & Cloud Tools
üíª Arduino IDE ‚Äì To program the system.
üåê Firebase / Thingspeak ‚Äì To store and analyze real-time traffic data.
üìå Trello ‚Äì For managing tasks.
üîó GitHub ‚Äì To share and track project code.
Main Features and Goals
Automated Traffic Control Uses PIR sensors to detect vehicles and pedestrians
Energy Efficiency: Power reduced using lights with LED technology.
IoT Integration: Data integration with the Arduino Yun Wi-Fi module for real-time data streaming.
Pedestrian Safety: Pedestrian mode activated by push button.
Data Logging & Analytics: Sends data to cloud service (e.g. Thing speak, Blynk or Arduino IoT Cloud) for analysis.

System Design & Code Example
Here‚Äôs how the circuit is set up:
‚Ä¢	Sensors at intersections detect vehicle flow.
‚Ä¢	Arduino processes data and adjusts signals accordingly.
‚Ä¢	Wi-Fi module sends real-time updates to the cloud.

 

 Testing the System
Before we deploy the system, we need to make sure everything works correctly.
Hardware Testing
‚úÖ Sensors correctly detect vehicles.
‚úÖ RFID module properly recognizes emergency vehicles.
‚úÖ Pedestrian button triggers the correct signal change.
Software Testing
‚úÖ Traffic data successfully uploads to Firebase/Thingspeak.
‚úÖ IoT dashboard correctly displays real-time traffic status.
‚úÖ System responds accurately in simulated traffic conditions.

Security Considerations
Potential Risks
üö® Hacking Threats ‚Äì Someone could manipulate traffic signals remotely.
üö® Unauthorized RFID Use ‚Äì Fake emergency vehicles could abuse priority access.
üö® Data Integrity Issues ‚Äì Incorrect data could cause system failures.
How We Handle Security
‚úî SSL encryption for IoT data (Learn More).
‚úî Authentication for RFID tags ‚Äì Only verified emergency vehicles get priority.
‚úî System updates & monitoring to prevent cyberattacks.
optimization.

References & Useful Links
- Arduino Yun Documentation: [https://docs.arduino.cc/] (https://docs.arduino.cc/)
- PIR Sensor Working Principle: [https://www.electronics-tutorials.ws/] (https://www.electronics-tutorials.ws/)
- IoT Traffic Management Systems: 


IoT Traffic Light Control with ESP8266
Smart Traffic Signal Management Using AI
Thingspeak for Real-time Traffic Monitoring
Security in IoT-Based Traffic Systems
C++ Tutorial
Top 10 IoT Devices Examples with AI in 2024: Innovating the Connected World ‚Äì IoT Magazine
upperinc.com/glossary/route-optimization/traffic-congestion-constraints/
